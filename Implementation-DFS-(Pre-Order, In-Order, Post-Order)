#include <iostream>

using namespace std;

struct Node {
    char data;
    struct Node *left;
    struct Node *right;
};

void preorder(struct Node *root){

    if(root == NULL)
        return;
    //cout<<"%c", root->data;
    printf("%c ", root->data);
    preorder(root->left);
    preorder(root->right);
}

void inorder(struct Node *root){
    if(root == NULL)
        return;
    inorder(root->left);
    printf("%c ", root->data);
    inorder(root->right);
}

void postorder(struct Node *root){
    if(root == NULL)
        return;
    postorder(root->left);
    postorder(root->right);
    printf("%c ", root->data);
}

Node* Insert(Node *root, char data){
    if(root == NULL){
        root = new Node();
        root->data = data;
        root->left = root->right = NULL;
    }
    else if(data <= root->data)
        root->left = Insert(root->left, data);
    else
        root->right = Insert(root->right, data);
    return root;

}

int main()
{
/*Code To Test the logic
	  Creating an example tree
              F
            /   \
           D     J
          / \   / \
         B   E G   K
        / \     \
       A   C     I
                /
               H
    */

    Node* root = NULL;
    root = Insert(root,'F'); root = Insert(root,'D');
	root = Insert(root,'J'); root = Insert(root,'B');
	root = Insert(root,'E'); root = Insert(root,'G');
	root = Insert(root,'K'); root = Insert(root,'A');
	root = Insert(root,'C'); root = Insert(root,'I');
	root = Insert(root,'H');

	//Print Nodes in Preorder
	cout<<"Preorder: ";
	preorder(root);
	cout<<"\n";

		//Print Nodes in Inorder
	cout<<"Inorder: ";
	inorder(root);
	cout<<"\n";

		//Print Nodes in Postorder
	cout<<"Postorder: ";
	postorder(root);
	cout<<"\n";

}
